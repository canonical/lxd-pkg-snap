name: lxd
base: core22
assumes:
  - snapd2.39
version: git
grade: devel
summary: LXD - container and VM manager
description: |-
 LXD is a system container and virtual machine manager.

 It offers a simple CLI and REST API to manage local or remote instances,
 uses an image based workflow and support for a variety of advanced features.

 Images are available for all Ubuntu releases and architectures as well
 as for a wide number of other Linux distributions. Existing
 integrations with many deployment and operation tools, makes it work
 just like a public cloud, except everything is under your control.

 LXD containers are lightweight, secure by default and a great
 alternative to virtual machines when running Linux on Linux.

 LXD virtual machines are modern and secure, using UEFI and secure-boot
 by default and a great choice when a different kernel or operating
 system is needed.

 With clustering, up to 50 LXD servers can be easily joined and managed
 together with the same tools and APIs and without needing any external
 dependencies.


 Supported configuration options for the snap (snap set lxd [<key>=<value>...]):

   - ceph.builtin: Use snap-specific Ceph configuration [default=false]
   - ceph.external: Use the system's ceph tools (ignores ceph.builtin) [default=false]
   - criu.enable: Enable experimental live-migration support [default=false]
   - daemon.debug: Increase logging to debug level [default=false]
   - daemon.group: Set group of users that have full control over LXD [default=lxd]
   - daemon.user.group: Set group of users that have restricted LXD access [default=lxd]
   - daemon.preseed: Pass a YAML configuration to `lxd init` on initial start
   - daemon.syslog: Send LXD log events to syslog [default=false]
   - daemon.verbose: Increase logging to verbose level [default=false]
   - lvm.external: Use the system's LVM tools [default=false]
   - lxcfs.pidfd: Start per-container process tracking [default=false]
   - lxcfs.loadavg: Start tracking per-container load average [default=false]
   - lxcfs.cfs: Consider CPU shares for CPU usage [default=false]
   - lxcfs.debug: Increase logging to debug level [default=false]
   - openvswitch.builtin: Run a snap-specific OVS daemon [default=false]
   - openvswitch.external: Use the system's OVS tools (ignores openvswitch.builtin) [default=false]
   - ovn.builtin: Use snap-specific OVN configuration [default=false]
   - shiftfs.enable: Enable shiftfs support [default=auto]

 For system-wide configuration of the CLI, place your configuration in
 /var/snap/lxd/common/global-conf/ (config.yml and servercerts)

contact: lxc-devel@lists.linuxcontainers.org
issues: https://github.com/lxc/lxd/issues
source-code: https://github.com/lxc/lxd
website: https://linuxcontainers.org/lxd
confinement: strict

apps:
  # Main commands
  activate:
    command: commands/daemon.activate
    daemon: oneshot
    plugs:
      - lxd-support
      - system-observe

  daemon:
    command: commands/daemon.start
    reload-command: commands/daemon.reload
    stop-command: commands/daemon.stop
    stop-timeout: 600s
    restart-condition: on-failure
    daemon: simple
    slots:
      - lxd
    plugs:
      - lxd-support
      - network-bind
      - system-observe
    sockets:
      unix:
        listen-stream: $SNAP_COMMON/lxd/unix.socket
        socket-mode: 0660

  user-daemon:
    command: commands/lxd-user
    stop-timeout: 600s
    restart-condition: on-failure
    daemon: simple
    plugs:
      - lxd-support
      - network-bind
      - system-observe
    sockets:
      unix:
        listen-stream: $SNAP_COMMON/lxd-user/unix.socket
        socket-mode: 0660

  lxc:
    command: commands/lxc
    completer: etc/bash_completion.d/snap.lxd.lxc
    plugs:
      - lxd-support
      - system-observe

  lxd:
    command: commands/lxd
    plugs:
      - lxd-support
      - system-observe

  # Sub-commands
  benchmark:
    command: commands/lxd-benchmark
    plugs:
      - lxd-support
      - system-observe
  buginfo:
    command: commands/buginfo
    plugs:
      - lxd-support
      - system-observe
  check-kernel:
    command: commands/lxd-check-kernel
    plugs:
      - lxd-support
      - system-observe
  lxc-to-lxd:
    command: commands/lxc-to-lxd
    plugs:
      - lxd-support
      - system-observe
  migrate:
    command: commands/lxd-migrate
    plugs:
      - lxd-support
      - system-observe

hooks:
  configure:
    plugs:
      - lxd-support
      - network
      - system-observe
  remove:
    plugs:
      - lxd-support
      - system-observe

parts:
  # Dependencies
  btrfs:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - btrfs-progs
    organize:
      sbin/: bin/
    prime:
      - bin/btrfs
      - bin/btrfstune
      - bin/mkfs.btrfs

  ceph:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - ceph-common
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
    prime:
      - bin/ceph
      - bin/radosgw-admin
      - bin/rbd
      - lib/*/ceph
      - lib/*/libcephfs*
      - lib/python3

      - lib/*/libboost_context.so*
      - lib/*/libboost_filesystem.so*
      - lib/*/libboost_iostreams.so*
      - lib/*/libboost_program_options.so*
      - lib/*/libboost_thread.so*
      - lib/*/libcurl-gnutls.so*
      - lib/*/libdaxctl.so*
      - lib/*/libibverbs.so*
      - lib/*/libicudata.so*
      - lib/*/libicuuc.so*
      - lib/*/liblber-2.5.so*
      - lib/*/libldap-2.5.so*
      - lib/*/liblua5.3.so*
      - lib/*/libndctl.so*
      - lib/*/libnghttp2.so*
      - lib/*/liboath.so*
      - lib/*/libpmemobj.so*
      - lib/*/libpmem.so*
      - lib/*/libpsl.so*
      - lib/*/librabbitmq.so*
      - lib/*/librados.so*
      - lib/*/librbd.so*
      - lib/*/librdmacm.so*
      - lib/*/librtmp.so*
      - lib/*/libsasl2.so*
      - lib/*/libsnappy.so*

  criu:
    source: https://github.com/checkpoint-restore/criu
    source-tag: v3.17.1
    source-type: git
    source-depth: 1
    plugin: nil
    build-packages:
      - asciidoc
      - libcap-dev
      - libnet1-dev
      - libnl-3-dev
      - libprotobuf-c-dev
      - libprotobuf-dev
      - protobuf-c-compiler
      - protobuf-compiler
      - xmlto
    stage-packages:
      - libnet1
      - libprotobuf-c1
    override-build: |
      set -ex

      [ "$(uname -m)" != "x86_64" ] && \
        [ "$(uname -m)" != "armv7l" ] && \
        [ "$(uname -m)" != "aarch64" ] && \
        [ "$(uname -m)" != "s390x" ] && \
        [ "$(uname -m)" != "ppc64le" ] && exit 0

      make
      mkdir -p "${CRAFT_PART_INSTALL}/criu/"
      cp criu/criu "${CRAFT_PART_INSTALL}/criu/"
    organize:
      usr/lib/: lib/
    prime:
      - criu/*
      - lib/*/libnet*
      - lib/*/libproto*

  dqlite:
    after:
      - raft
      - sqlite
    source: https://github.com/canonical/dqlite
    source-type: git
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    stage-packages:
      - libuv1
    build-packages:
      - libuv1-dev
    organize:
      usr/lib/: lib/
    prime:
      - lib/libdqlite*so*
      - lib/*/libuv*

  edk2:
    after:
      - nasm
    source: https://github.com/tianocore/edk2
    source-type: git
    source-tag: IRRELEVANT
    source-depth: 1
    plugin: nil
    build-packages:
      - on amd64:
        - acpica-tools
        - uuid-dev
      - on arm64:
        - acpica-tools
        - uuid-dev
    override-pull: |-
      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && exit 0
      set -ex
      git clone https://github.com/tianocore/edk2 . -b edk2-stable202208

      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"
    override-build: |-
      OVMF_TARGET_DIRECTORY="${CRAFT_PART_INSTALL}/share/qemu/"
      CLEAN_AFTER_BUILD=true
      IFS='' read -r DEFAULT_BUILD_FLAGS << EOF1
              -DSMM_REQUIRE=TRUE \
              -DSECURE_BOOT_ENABLE=TRUE \
              -DNETWORK_IP4_ENABLE=TRUE \
              -DNETWORK_IP6_ENABLE=TRUE \
              -DNETWORK_TLS_ENABLE=TRUE \
              -DNETWORK_HTTP_BOOT_ENABLE=TRUE \
              -DTPM2_ENABLE=TRUE \
              -DTPM2_CONFIG_ENABLE=TRUE
      EOF1

      fix_submodules(){
          sed -i "s#https://git.cryptomilk.org/projects/cmocka#https://gitlab.com/cmocka/cmocka#g" .gitmodules
          git submodule update --init --recursive
      }

      # Apply patches
      apply_patches(){
          patch -p1 < "${CRAFT_PROJECT_DIR}/patches/edk2-0001-force-DUID-LLT.patch"
          cp "${CRAFT_PROJECT_DIR}/patches/edk2-0002-logo.bmp" MdeModulePkg/Logo/Logo.bmp
          patch -p1 < "${CRAFT_PROJECT_DIR}/patches/edk2-0003-boot-delay.patch"
          patch -p1 < "${CRAFT_PROJECT_DIR}/patches/edk2-0004-gcc-errors.patch"
      }

      init_build_environment(){
          fix_submodules
          apply_patches
          mkdir -p "${OVMF_TARGET_DIRECTORY}"
      }

      build_edk2(){
          OVMF_CODE_PATH=$1
          OVMF_VARS_PATH=$2
          shift 2
          EXTRA_BUILD_FLAGS="$@"

          # Run in a bash sub-shell as edksetup.sh requires it
          set -ex
          (
          cat <<EOF2
          . ./edksetup.sh
          make -C BaseTools ARCH=${ARCH}
          build -a ${ARCH} -t GCC5 -b RELEASE -p ${PKG} \
              ${DEFAULT_BUILD_FLAGS} \
              ${EXTRA_BUILD_FLAGS}
          cp Build/*/*/FV/${FV_CODE}.fd "${OVMF_CODE_PATH}"
          cp Build/*/*/FV/${FV_VARS}.fd "${OVMF_VARS_PATH}"

          # The last build needs to stay as the build files are needed for the secureboot part
          if [ "${CLEAN_AFTER_BUILD}" = true ]; then
              build clean -a ${ARCH} -t GCC5 -b RELEASE -p ${PKG}
          fi
      EOF2
          ) | bash -e
      }

      if [ "$(uname -m)" = "x86_64" ]; then
          # VARS
          ARCH="X64"
          PKG="OvmfPkg/OvmfPkgX64.dsc"
          FV_CODE="OVMF_CODE"
          FV_VARS="OVMF_VARS"

          # Start building
          init_build_environment
          build_edk2 "${OVMF_TARGET_DIRECTORY}/OVMF_CODE.fd" "${OVMF_TARGET_DIRECTORY}/OVMF_VARS.fd" -DFD_SIZE_2MB=2
          # Don't clean on last build as files are needed during secureboot part
          CLEAN_AFTER_BUILD=false
          build_edk2 "${OVMF_TARGET_DIRECTORY}/OVMF_CODE_4M.fd" "${OVMF_TARGET_DIRECTORY}/OVMF_VARS_4M.fd" -DFD_SIZE_4MB

      elif [ "$(uname -m)" = "aarch64" ]; then
          ARCH="AARCH64"
          PKG="ArmVirtPkg/ArmVirtQemu.dsc"
          FV_CODE="QEMU_EFI"
          FV_VARS="QEMU_VARS"

          # Start building
          init_build_environment
          # Don't clean on last build as files are needed during secureboot part
          CLEAN_AFTER_BUILD=false
          build_edk2 "${OVMF_TARGET_DIRECTORY}/OVMF_CODE.fd" "${OVMF_TARGET_DIRECTORY}/OVMF_VARS.fd" -DFD_SIZE_IN_MB=2

          truncate -s 64m "${OVMF_TARGET_DIRECTORY}/OVMF_CODE.fd"
          truncate -s 64m "${OVMF_TARGET_DIRECTORY}/OVMF_VARS.fd"

      else
          exit 0
      fi

      if [ "${CLEAN_AFTER_BUILD}" = true ]; then
         echo "Last build must not be cleaned as the files are used by secureboot part. Set CLEAN_AFTER_BUILD accordingly."
         exit 2
      fi

    prime:
      - share/qemu/*

  libmnl:
    source: https://git.netfilter.org/libmnl
    source-type: git
    source-tag: libmnl-1.0.5
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    organize:
      usr/lib/: lib/
    prime:
      - lib/libmnl*so*

  libnftnl:
    after:
      - libmnl
    source: https://git.netfilter.org/libnftnl
    source-type: git
    source-tag: libnftnl-1.2.4
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    organize:
      usr/lib/: lib/
    prime:
      - lib/libnftnl*so*
    override-build: |
      craftctl default

      sed -i "s# /lib/libmnl.la# ${CRAFT_STAGE}/lib/libmnl.la#g" "${CRAFT_PART_INSTALL}/lib/libnftnl.la"

  libseccomp:
    source: https://github.com/seccomp/libseccomp
    source-type: git
    source-tag: v2.5.4
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    build-packages:
      - gperf
    organize:
      usr/lib/: lib/
    prime:
      - lib/libseccomp*so*

  libtpms:
    source: https://github.com/stefanberger/libtpms
    source-type: git
    source-tag: v0.9.6
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
      - --with-tpm2
      - --with-openssl
    organize:
      usr/lib/: lib/
    prime:
      - lib/libtpms*so*

  liburing:
    source: https://github.com/axboe/liburing
    source-type: git
    source-tag: liburing-2.3
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    override-build: |-
      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && [ "$(uname -m)" != "ppc64le" ] && [ "$(uname -m)" != "s390x" ] && exit 0
      craftctl default
    organize:
      usr/lib/: lib/
    prime:
      - lib/liburing*so*

  libusb:
    source: https://github.com/libusb/libusb
    source-type: git
    source-tag: v1.0.26
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    organize:
      usr/lib/: lib/
    prime:
      - lib/libusb*so*

  logrotate:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - logrotate
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
      usr/sbin/: bin/
    stage:
      - bin/logrotate
    prime:
      - bin/logrotate

  lvm:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - dmeventd
      - lvm2
      - thin-provisioning-tools
    organize:
      sbin/: bin/
      usr/lib/: lib/
      usr/sbin/: bin/
    prime:
      - bin/cache_*
      - bin/dmeventd
      - bin/era_*
      - bin/lv*
      - bin/pdata_tools
      - bin/pv*
      - bin/thin_*
      - bin/vg*
      - -bin/vgimportclone
      - -bin/lvmconf
      - -bin/lvmdump
      - -bin/lvmetad
      - -bin/lvmpolld
      - etc/lvm/lvm.conf
      - lib/*/device-mapper/*
      - lib/*/libaio.so*
      - lib/*/libdevmapper*
      - lib/*/liblvm*
      - lib/*/libreadline.so*

  minio:
    source: https://github.com/minio/minio
    source-type: git
    source-tag: RELEASE.2023-02-27T18-10-45Z
    source-depth: 1
    plugin: nil
    build-snaps:
      - go
    override-pull: |
      [ "$(uname -m)" = "riscv64" ] && exit 0

      craftctl default
    override-build: |
      [ "$(uname -m)" = "riscv64" ] && exit 0

      set -ex

      # Setup build environment
      export GOPATH=$(realpath ./.go)

      # Build the binaries
      make build

      # Install minio command
      mkdir -p ${CRAFT_PART_INSTALL}/bin/
      cp minio ${CRAFT_PART_INSTALL}/bin/minio
    prime:
      - bin/minio*

  nano:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - nano
    organize:
      usr/bin/: bin/
    prime:
      - bin/nano
      - etc/nanorc

  nasm:
    source: https://github.com/netwide-assembler/nasm
    source-type: git
    source-tag: nasm-2.16.01
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    organize:
      usr/bin/: bin/
    prime:
      - bin/nasm
    override-build: |
      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/nasm-0000-disable-manpages.patch"
      craftctl default

  nftables:
    after:
      - libmnl
      - libnftnl
    source: https://git.netfilter.org/nftables
    source-type: git
    source-tag: v1.0.6
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
      - --with-json
    build-packages:
      - libedit-dev
      - libjansson-dev
      - libreadline-dev
    stage-packages:
      - libjansson4
    override-build: |
      set -ex

      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      set +ex
      craftctl default
      set -ex
    organize:
      sbin/: bin/
      usr/lib/: lib/
    prime:
      - bin/nft
      - lib/*/libjansson*so*
      - lib/libnftables*so*

  nvidia-container:
    after:
      - libseccomp
    source: https://github.com/NVIDIA/libnvidia-container
    source-type: git
    source-tag: v1.12.0
    source-depth: 1
    plugin: make
    build-packages:
      - bmake
      - curl
      - libelf-dev
      - lsb-release
    override-build: |-
      set -ex

      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && exit 0

      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/nvidia-0001-Fix-for-22.04-build.patch"
      patch -p1 < "${CRAFT_PROJECT_DIR}/patches/nvidia-0002-pre-load-libdl.patch"

      mkdir -p "${CRAFT_PART_INSTALL}/bin/"
      cp ${CRAFT_PROJECT_DIR}/snapcraft/wrappers/nvidia-container-cli "${CRAFT_PART_INSTALL}/bin/"

      set +ex
      craftctl default
    organize:
      usr/local/bin/nvidia-container-cli: bin/nvidia-container-cli.real
      usr/local/lib: lib/
    prime:
      - bin/nvidia-container-cli*
      - lib/libnvidia-container*.so*

  openvswitch:
    source: https://github.com/openvswitch/ovs
    source-type: git
    source-tag: v3.1.0
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --enable-ssl
      - --prefix=
    stage-packages:
      - uuid-runtime
    override-build: |
      set -ex

      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      set +ex
      craftctl default
      set -ex
    organize:
      sbin/: bin/
      usr/bin/: bin/
    prime:
      - bin/ovs-appctl
      - bin/ovs-vsctl
      - bin/ovs-vswitchd
      - bin/ovsdb-*
      - bin/uuidgen
      - share/openvswitch/

  ovn:
    after:
      - openvswitch
    source: https://github.com/ovn-org/ovn
    source-type: git
    source-tag: v23.03.0
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --enable-ssl
      - --prefix=
      - --with-ovs-source=../../openvswitch/build/
    prime:
      - bin/ovn-nbctl
      - bin/ovn-sbctl

  spice-protocol:
    source: https://github.com/freedesktop/spice-protocol
    source-type: git
    source-tag: v0.14.4
    source-depth: 1
    plugin: meson
    prime: []
    build-packages:
      - meson
      - ninja-build

  spice-server:
    after:
      - spice-protocol
    source: https://github.com/freedesktop/spice
    source-type: git
    source-tag: v0.15.1
    source-depth: 1
    plugin: meson
    meson-parameters:
      - --prefix=/
      - -Dgstreamer=no
      - -Dmanual=false
      - -Dlz4=false
      - -Dsasl=false
      - -Dopus=disabled
      - -Dsmartcard=disabled
      - -Dtests=false
    build-packages:
      - libjpeg-turbo8-dev
      - python3-pyparsing
      - python3-six
      - meson
      - ninja-build
    stage-packages:
      - libjpeg-turbo8
      - libpixman-1-0
    organize:
      sbin/: bin/
      usr/lib: lib/
      usr/local/lib/: lib/
    prime:
      - lib/*/libjpeg*so*
      - lib/*/libspice-server*so*
      - lib/*/libpixman*so*

  swtpm:
    after:
      - libseccomp
      - libtpms
    source: https://github.com/stefanberger/swtpm
    source-type: git
    source-tag: v0.8.0
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
      - --with-seccomp
      - --with-openssl
      - --without-cuse
    build-packages:
      - expect
      - gawk
      - iproute2
      - libjson-glib-dev
      - python3-cryptography
      - python3-setuptools
      - socat
    stage-packages:
      - libjson-glib-1.0-0
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
      lib/swtpm/: lib/
    prime:
      - bin/swtpm
      - lib/libswtpm*so*
      - lib/*/libjson-glib-1.0.so*

  qemu:
    after:
      - libseccomp
      - liburing
      - libusb
      - spice-protocol
      - spice-server
    source: IRRELEVANT
    source-type: git
    source-tag: IRRELEVANT
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --disable-bochs
      - --disable-cloop
      - --disable-dmg
      - --disable-docs
      - --disable-guest-agent
      - --disable-parallels
      - --disable-qed
      - --disable-slirp
      - --disable-user
      - --disable-vdi
      - --disable-vnc
      - --disable-xen
      - --enable-attr
      - --enable-cap-ng
      - --enable-kvm
      - --enable-libusb
      - --enable-usb-redir
      - --enable-linux-aio
      - --enable-linux-io-uring
      - --enable-numa
      - --enable-pie
      - --enable-rbd
      - --enable-seccomp
      - --enable-spice
      - --enable-system
      - --enable-tcg
      - --enable-tools
      - --enable-vhost-crypto
      - --enable-vhost-kernel
      - --enable-vhost-net
      - --enable-vhost-user
      - --enable-virtfs
      - --firmwarepath=/snap/lxd/current/share/qemu/
      - --localstatedir=/var/
    build-packages:
      - bison
      - flex
      - pkg-config
      - libaio-dev
      - libcap-ng-dev
      - libglib2.0-dev
      - libnuma-dev
      - libpixman-1-dev
      - librbd-dev
      - libusbredirhost-dev
    stage-packages:
      - genisoimage
      - libatomic1
      - libmagic1
      - libnuma1
      - libpixman-1-0
      - libusbredirhost1
      - libusbredirparser1
    override-pull: |-
      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && [ "$(uname -m)" != "ppc64le" ] && [ "$(uname -m)" != "s390x" ] && exit 0
      set -ex
      git clone https://gitlab.com/qemu/qemu . -b v7.1.0
    override-build: |-
      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && [ "$(uname -m)" != "ppc64le" ] && [ "$(uname -m)" != "s390x" ] && exit 0

      set -ex
      # Mangle the configure a bit
      QEMUARCH="$(uname -m)"
      [ "${QEMUARCH}" = "ppc64le" ] && QEMUARCH="ppc64"
      sed -i "s/^unset target_list$/target_list=\"${QEMUARCH}-softmmu\"/" configure
      sed -i 's#libseccomp_minver=".*#libseccomp_minver="0.0"#g' configure

      set +ex
      craftctl default
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
      usr/local/bin/: bin/
      usr/local/lib/: lib/
      usr/local/libexec/: bin/
      usr/local/share/: share/
    prime:
      - bin/genisoimage*
      - bin/mkisofs*
      - bin/qemu-system-*
      - bin/qemu-img*
      - bin/virtfs-proxy-helper*
      - bin/virtiofsd*
      - lib/*/libatomic.so*
      - lib/*/libmagic*so*
      - lib/*/libnuma*so*
      - lib/*/libpixman*so*
      - lib/*/libusbredir*so*
      - share/qemu/keymaps*
      - share/qemu/efi-virtio.rom*
      - share/qemu/kvmvapic.bin*
      - share/qemu/s390-*.img*
      - share/qemu/slof.bin*
      - share/qemu/vgabios-*.bin*

  qemu-ovmf-secureboot:
    after:
      - edk2
      - qemu
    source: edk2-vars-generator
    plugin: nil
    build-packages:
      - dosfstools
      - mtools
      - python3-pexpect
      - xorriso
    override-build: |-
      [ "$(uname -m)" != "x86_64" ] && [ "$(uname -m)" != "aarch64" ] && exit 0

      export ARCH="$(basename $(readlink -f ${CRAFT_STAGE}/lib/*-linux-gnu*/))"
      export LD_LIBRARY_PATH="${CRAFT_STAGE}/lib:${CRAFT_STAGE}/lib/${ARCH}"

      set -ex
      build_secureboot_vars(){
         FIRMWARE_PROFILE=$1
         OVMF_CODE_PATH=$2
         OVMF_VARS_PATH=$3
         CA_FILE_PATH=$4
         OVMF_VARS_SECUREBOOT_PATH=$5

         mkdir -p "$(dirname -- ${OVMF_VARS_SECUREBOOT_PATH} )"
        ./edk2-vars-generator -f "${FIRMWARE_PROFILE}" \
          -e ../../edk2/build/Build/*/*/*/EnrollDefaultKeys.efi \
          -s ../../edk2/build/Build/*/*/*/Shell.efi \
          -c "${OVMF_CODE_PATH}" \
          -V "${OVMF_VARS_PATH}" \
          -C "$(cat ${CA_FILE_PATH} )" \
          -o "${OVMF_VARS_SECUREBOOT_PATH}"
      }

      QEMU_INSTALL="${CRAFT_PART_INSTALL}/share/qemu"
      QEMU_STAGE="${CRAFT_STAGE}/share/qemu"

      if [ "$(uname -m)" = "x86_64" ]; then
          build_secureboot_vars OVMF "${QEMU_STAGE}/OVMF_CODE.fd" \
                                     "${QEMU_STAGE}/OVMF_VARS.fd" \
                                     "ubuntu-sb.crt" \
                                     "${QEMU_INSTALL}/OVMF_VARS.ms.fd"

          build_secureboot_vars OVMF_4M "${QEMU_STAGE}/OVMF_CODE_4M.fd" \
                                        "${QEMU_STAGE}/OVMF_VARS_4M.fd" \
                                        "ubuntu-sb.crt" \
                                        "${QEMU_INSTALL}/OVMF_VARS_4M.ms.fd"

      elif [ "$(uname -m)" = "aarch64" ]; then
          build_secureboot_vars AAVMF "${QEMU_STAGE}/OVMF_CODE.fd" \
                                      "${QEMU_STAGE}/OVMF_VARS.fd" \
                                      "ubuntu-sb.crt" \
                                      "${QEMU_INSTALL}/OVMF_VARS.ms.fd"
      else
          exit 0
      fi
    prime:
      - share/qemu/*

  raft:
    source: https://github.com/canonical/raft
    source-type: git
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    stage-packages:
      - libuv1
      - liblz4-1
    build-packages:
      - libuv1-dev
      - liblz4-dev
    organize:
      usr/lib/: lib/
    prime:
      - lib/libraft*so*
      - lib/*/libuv.so*

  sqlite:
    source: https://github.com/sqlite/sqlite
    source-type: git
    source-depth: 1
    source-tag: version-3.41.0
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    build-packages:
      - tcl
    prime:
      - bin/sqlite3
      - lib/libsqlite3*so*

  squashfs-tools-ng:
    source: https://github.com/AgentD/squashfs-tools-ng
    source-type: git
    source-tag: v1.2.0
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=
    build-packages:
      - liblzma-dev
    prime:
      - bin/sqfs2tar
      - bin/tar2sqfs
      - lib/libsquashfs.so*

  vim:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - vim-common
      - vim-tiny
    organize:
      usr/bin/: bin/
      usr/share/vim/vim*/debian.vim: etc/vimrc
    prime:
      - bin/vim.tiny
      - etc/vimrc

  xfs:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - xfsprogs
    organize:
      usr/lib/: lib/
      usr/sbin/: bin/
      sbin/: bin/
    prime:
      - bin/xfs_admin
      - bin/xfs_db
      - bin/xfs_growfs
      - bin/xfs_repair
      - bin/mkfs.xfs
      - lib/*/libinih.so*

  xtables:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - arptables
      - ebtables
    organize:
      usr/lib/ebtables/: lib/
      usr/sbin/: bin/
    prime:
      - bin/arptables-legacy
      - bin/ebtables-legacy
      - etc/ethertypes
      - etc/protocols
      - lib/libebtc.so.*

  xz:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - xz-utils
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
      usr/sbin/: bin/
    prime:
      - bin/lzma
      - bin/xz
      - lib/*/liblzma*so*
    override-build: |
      craftctl default

      # Include the lzma symlink
      ln -s xz "${CRAFT_PART_INSTALL}/usr/bin/lzma"

  zfs-0-8:
    source: https://github.com/openzfs/zfs
    source-type: git
    source-tag: zfs-0.8.6
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/
      - --with-config=user
    build-packages:
      - libblkid-dev
      - libssl-dev
      - uuid-dev
      - zlib1g-dev
    override-build: |
      set -ex

      [ "$(uname -m)" != "x86_64" ] && \
        [ "$(uname -m)" != "aarch64" ] && \
        [ "$(uname -m)" != "s390x" ] && \
        [ "$(uname -m)" != "ppc64le" ] && exit 0

      set +ex
      craftctl default
      set -ex

      mv "${CRAFT_PART_INSTALL}" "${CRAFT_PART_INSTALL}.tmp"
      mkdir -p "${CRAFT_PART_INSTALL}/zfs-0.8/bin" "${CRAFT_PART_INSTALL}/zfs-0.8/lib"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zfs" "${CRAFT_PART_INSTALL}/zfs-0.8/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zpool" "${CRAFT_PART_INSTALL}/zfs-0.8/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/udev/zvol_id" "${CRAFT_PART_INSTALL}/zfs-0.8/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/"*so* "${CRAFT_PART_INSTALL}/zfs-0.8/lib/"
      rm -Rf "${CRAFT_PART_INSTALL}.tmp"

  zfs-2-0:
    source: https://github.com/openzfs/zfs
    source-type: git
    source-tag: zfs-2.0.7
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/
      - --with-config=user
    build-packages:
      - libblkid-dev
      - libssl-dev
      - uuid-dev
      - zlib1g-dev
    override-build: |
      set -ex

      [ "$(uname -m)" != "x86_64" ] && \
        [ "$(uname -m)" != "aarch64" ] && \
        [ "$(uname -m)" != "s390x" ] && \
        [ "$(uname -m)" != "ppc64le" ] && exit 0

      set +ex
      craftctl default
      set -ex

      mv "${CRAFT_PART_INSTALL}" "${CRAFT_PART_INSTALL}.tmp"
      mkdir -p "${CRAFT_PART_INSTALL}/zfs-2.0/bin" "${CRAFT_PART_INSTALL}/zfs-2.0/lib"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zfs" "${CRAFT_PART_INSTALL}/zfs-2.0/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zpool" "${CRAFT_PART_INSTALL}/zfs-2.0/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/udev/zvol_id" "${CRAFT_PART_INSTALL}/zfs-2.0/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/"*so* "${CRAFT_PART_INSTALL}/zfs-2.0/lib/"
      rm -Rf "${CRAFT_PART_INSTALL}.tmp"

  zfs-2-1:
    source: https://github.com/openzfs/zfs
    source-type: git
    source-tag: zfs-2.1.9
    source-depth: 1
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/
      - --with-config=user
    build-packages:
      - libblkid-dev
      - libssl-dev
      - uuid-dev
      - zlib1g-dev
    override-build: |
      set -ex

      [ "$(uname -m)" != "x86_64" ] && \
        [ "$(uname -m)" != "aarch64" ] && \
        [ "$(uname -m)" != "s390x" ] && \
        [ "$(uname -m)" != "ppc64le" ] && exit 0

      set +ex
      craftctl default
      set -ex

      mv "${CRAFT_PART_INSTALL}" "${CRAFT_PART_INSTALL}.tmp"
      mkdir -p "${CRAFT_PART_INSTALL}/zfs-2.1/bin" "${CRAFT_PART_INSTALL}/zfs-2.1/lib"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zfs" "${CRAFT_PART_INSTALL}/zfs-2.1/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/sbin/zpool" "${CRAFT_PART_INSTALL}/zfs-2.1/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/udev/zvol_id" "${CRAFT_PART_INSTALL}/zfs-2.1/bin/"
      mv "${CRAFT_PART_INSTALL}.tmp/lib/"*so* "${CRAFT_PART_INSTALL}/zfs-2.1/lib/"
      rm -Rf "${CRAFT_PART_INSTALL}.tmp"


  zstd:
    source: snapcraft/empty
    plugin: nil
    stage-packages:
      - zstd
    organize:
      usr/bin/: bin/
    prime:
      - bin/pzstd
      - bin/zstd

  # Core components
  lxc:
    after:
      - libseccomp
    source: https://github.com/lxc/lxc
    source-type: git
    build-packages:
      - libapparmor-dev
      - libcap-dev
      - libdbus-1-dev
      - libgnutls28-dev
      - libselinux1-dev
      - pkg-config
      - meson
      - ninja-build
    plugin: meson
    meson-parameters:
      - --prefix=/
      - -Dexamples=false
      - -Dman=false
      - -Dtools=false
      - -Dtests=false
      - -Dmemfd-rexec=false
      - -Dapparmor=true
      - -Dseccomp=true
      - -Dselinux=true
      - -Dcapabilities=true
      - -Drootfs-mount-path=/var/snap/lxd/common/lxc/
      - -Dlibexecdir=/snap/lxd/current/libexec/
    organize:
      snap/lxd/current/lxc: lxc
      snap/lxd/current/libexec: libexec
      share/lxc/hooks: lxc/hooks
    prime:
      - bin/lxc-checkconfig
      - lib/*/liblxc.so.1
      - lib/*/liblxc.so.1.*
      - lxc/config/common.conf.d
      - lxc/hooks/nvidia
    override-build: |
      set -ex

      cd ../src
      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      cd ../build

      set +ex
      craftctl default
      set -ex

      mkdir -p $CRAFT_PART_INSTALL/lxc/config/common.conf.d/
      ln -s /var/snap/lxd/common/lxc/local.conf $CRAFT_PART_INSTALL/lxc/config/common.conf.d/01-local.conf

  lxcfs:
    source: https://github.com/lxc/lxcfs
    source-type: git
    build-packages:
      - libfuse3-dev
      - libpam0g-dev
      - pkg-config
      - python3-jinja2
      - meson
      - ninja-build
    stage-packages:
      - fuse3
      - glibc-tools
    plugin: meson
    meson-parameters:
      - --prefix=/
      - --datadir=/snap/lxd/current/
      - --localstatedir=/var/snap/lxd/common/var/
      - -Ddocs=false
      - -Dtests=false
    organize:
      lib/*/lxcfs/liblxcfs.so: lib/
      snap/lxd/current/lxc/config/common.conf.d/*: lxc/config/common.conf.d/
      snap/lxd/current/lxcfs/: lxcfs/
    prime:
      - bin/fusermount
      - lib/*/libfuse3.so.*

      - bin/lxcfs
      - lib/liblxcfs.so

      - lxc/config/common.conf.d/00-lxcfs.conf
      - lxcfs/
    override-build: |
      set -ex

      # Git cherry-picks
      cd ../src
      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      set +ex
      craftctl default
      set -ex

      patch -p1 $CRAFT_PART_INSTALL/snap/lxd/current/lxcfs/lxc.mount.hook < "${CRAFT_PROJECT_DIR}/patches/lxcfs-0001-hook.patch"

  lxd:
    source: https://github.com/lxc/lxd
    source-type: git
    after:
      - lxc
      - dqlite
      - sqlite
    build-packages:
      - libacl1-dev
      - libudev-dev
      - pkg-config
    build-snaps:
      - go
    stage-packages:
      - acl
      - attr
      - dnsmasq-base
      - gdisk
      - iw
      - netbase
      - pciutils
      - pigz
      - rsync
      - squashfs-tools
      - usbutils
      - xdelta3
    plugin: nil
    override-pull: |
      craftctl default
      set -ex

      # Setup build environment
      export GOPATH=$(realpath ./.go)

      # Setup the GOPATH
      rm -Rf "${GOPATH}"
      mkdir -p "${GOPATH}/src/github.com/lxc"
      ln -s "$(pwd)" "${GOPATH}/src/github.com/lxc/lxd"

      # Download the dependencies
      go get -d -v ./...
    override-build: |
      set -ex

      # Git cherry-picks
      cd ../src
      git config user.email "noreply@linuxcontainers.org"
      git config user.name "LXD snap builder"

      # Setup build environment
      export GOPATH=$(realpath ./.go)
      export CGO_CFLAGS="-I${CRAFT_STAGE}/include/ -I${CRAFT_STAGE}/usr/local/include/"
      export CGO_LDFLAGS="-L${CRAFT_STAGE}/lib/ -L${CRAFT_STAGE}/usr/local/lib/"
      export CGO_LDFLAGS_ALLOW="(-Wl,-wrap,pthread_create)|(-Wl,-z,now)"

      # Build the binaries
      go build -o "${CRAFT_PART_INSTALL}/bin/lxc" github.com/lxc/lxd/lxc
      go build -o "${CRAFT_PART_INSTALL}/bin/lxc-to-lxd" github.com/lxc/lxd/lxc-to-lxd
      go build -o "${CRAFT_PART_INSTALL}/bin/lxd" -tags=libsqlite3 github.com/lxc/lxd/lxd
      CGO_ENABLED=0 go build -o "${CRAFT_PART_INSTALL}/bin/lxd-agent" -tags=agent,netgo github.com/lxc/lxd/lxd-agent
      go build -o "${CRAFT_PART_INSTALL}/bin/lxd-benchmark" github.com/lxc/lxd/lxd-benchmark
      go build -o "${CRAFT_PART_INSTALL}/bin/lxd-user" github.com/lxc/lxd/lxd-user

      # Setup bash completion
      mkdir -p ${CRAFT_PART_INSTALL}/etc/bash_completion.d/
      cp scripts/bash/lxd-client ${CRAFT_PART_INSTALL}/etc/bash_completion.d/snap.lxd.lxc
    organize:
      usr/bin/: bin/
      usr/lib/: lib/
      usr/share/misc/: share/misc/
      var/lib/usbutils/usb.ids: share/misc/
      usr/sbin/: bin/
      sbin/: bin/
    prime:
      - bin/dnsmasq
      - bin/getfattr
      - bin/setfattr
      - bin/iw
      - bin/pigz
      - bin/rsync
      - bin/setfacl
      - bin/sgdisk
      - bin/unsquashfs
      - bin/xdelta3

      - lib/*/libidn.so.*

      - etc/bash_completion.d/snap.lxd.lxc

      - share/misc

      - bin/lxc
      - bin/lxc-to-lxd
      - bin/lxd
      - bin/lxd-agent
      - bin/lxd-benchmark
      - bin/lxd-user

  lxd-migrate:
    source: lxd-migrate/
    after:
      - lxd
      - sqlite
    build-snaps:
      - go
    plugin: nil
    override-pull: |
      craftctl default
      set -ex

      # Setup build environment
      export GOPATH=$(realpath ./.go)

      # Download the dependencies
      go get -d -v ./...
    override-build: |
      set -ex

      # Setup build environment
      export GOPATH=$(realpath ./.go)
      export CGO_CFLAGS="-I${CRAFT_STAGE}/include/ -I${CRAFT_STAGE}/usr/local/include/"
      export CGO_LDFLAGS="-L${CRAFT_STAGE}/lib/ -L${CRAFT_STAGE}/usr/local/lib/"

      # Build the binaries
      go build -o "${CRAFT_PART_INSTALL}/bin/lxd-migrate" -tags=libsqlite3 ./

      # Install bridge script
      mkdir -p ${CRAFT_PART_INSTALL}/bin/
      cp scripts/upgrade-bridge ${CRAFT_PART_INSTALL}/bin/upgrade-bridge
    prime:
      - bin/lxd-migrate
      - bin/upgrade-bridge

  lxd-ui:
    source: https://github.com/canonical/lxd-ui
    source-type: git
    plugin: nil
    override-pull: |
      [ "$(uname -m)" = "riscv64" ] && exit 0

      snap install node --channel=18/stable --classic || true
      craftctl default
    override-build: |
      [ "$(uname -m)" = "riscv64" ] && exit 0

      craftctl default

      npm install yarn --global
      yarn install
      yarn build

      mkdir -p "${CRAFT_PART_INSTALL}/share"
      cp -R build/ui "${CRAFT_PART_INSTALL}/share/lxd-ui/"
    prime:
      - share/lxd-ui*

  shmounts:
    source: shmounts/
    plugin: make
    prime:
      - bin/setup-shmounts

  snap-query:
    source: snap-query/
    build-snaps:
      - go
    plugin: nil
    override-build: |
      set -ex

      # Setup build environment
      export GOPATH=$(realpath ./.go)

      # Build the binaries
      go build -o "${CRAFT_PART_INSTALL}/bin/snap-query" snap-query.go
    prime:
      - bin/snap-query

  strip:
    source: snapcraft/empty
    after:
      - btrfs
      - ceph
      - dqlite
      - libseccomp
      - logrotate
      - lvm
      - nano
      - nvidia-container
      - openvswitch
      - ovn
      - raft
      - sqlite
      - squashfs-tools-ng
      - vim
      - xfs
      - xz
      - zfs-0-8
      - zfs-2-0
      - zfs-2-1
      - lxc
      - lxcfs
      - criu
      - lxd
      - lxd-migrate
      - shmounts
      - snap-query
    plugin: nil
    override-prime: |
      set -x

      # Strip some of the heavy bits
      strip -s ${CRAFT_PRIME}/bin/lxc
      strip -s ${CRAFT_PRIME}/bin/lxd*
      strip -s ${CRAFT_PRIME}/bin/snap*
      strip -s ${CRAFT_PRIME}/lib/libdqlite*
      strip -s ${CRAFT_PRIME}/lib/libsqlite*

      for zfs in zfs-0.8 zfs-2.0 zfs-2.1; do
          [ ! -d "${CRAFT_PRIME}/${zfs}" ] && continue
          strip -s ${CRAFT_PRIME}/${zfs}/bin/* ${CRAFT_PRIME}/${zfs}/lib/*
      done

      [ -e "${CRAFT_PRIME}/criu/criu" ] && strip -s ${CRAFT_PRIME}/criu/criu

      exit 0

  wrappers:
    plugin: dump
    source: snapcraft/
    organize:
      hooks/: snap/hooks/
      wrappers/editor: bin/
      wrappers/remote-viewer: bin/
      wrappers/sshfs: bin/
